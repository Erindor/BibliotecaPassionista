/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.livro;



import controller.LivroController;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Livro;

/**
 *
 * @author Bruno
 */
public class ListarLivros extends javax.swing.JInternalFrame {

    private LivroController livroController = new LivroController();
    DefaultTableModel dtm;
    private int qtdRegistros = 50;
    private int nPagina = 1;
    
    public ListarLivros() {
        initComponents();
        getRootPane().setDefaultButton(btn_pesquisar);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLayeredPane1 = new javax.swing.JLayeredPane();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        panel_selecao_pesquisa = new javax.swing.JPanel();
        radio_titulo = new javax.swing.JRadioButton();
        radio_locacao = new javax.swing.JRadioButton();
        panel_pesquisa = new javax.swing.JPanel();
        label_pesquisar_nome = new javax.swing.JLabel();
        input_pesquisar = new javax.swing.JTextField();
        btn_pesquisar = new javax.swing.JButton();
        panel_tabela = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_livros = new javax.swing.JTable();
        panel_paginacao = new javax.swing.JPanel();
        label_voltarPagina = new javax.swing.JLabel();
        label_nPagina = new javax.swing.JLabel();
        label_proximaPagina = new javax.swing.JLabel();
        panel_ferramentas = new javax.swing.JPanel();
        btn_editar = new javax.swing.JButton();
        btn_excluir = new javax.swing.JButton();
        label_total = new javax.swing.JLabel();

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Listar livros");

        panel_selecao_pesquisa.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING));

        buttonGroup1.add(radio_titulo);
        radio_titulo.setSelected(true);
        radio_titulo.setText("Título do livro");
        panel_selecao_pesquisa.add(radio_titulo);

        buttonGroup1.add(radio_locacao);
        radio_locacao.setText("Classificação");
        panel_selecao_pesquisa.add(radio_locacao);

        panel_pesquisa.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panel_pesquisa.setLayout(new javax.swing.BoxLayout(panel_pesquisa, javax.swing.BoxLayout.LINE_AXIS));

        label_pesquisar_nome.setText("Título do livro:");
        panel_pesquisa.add(label_pesquisar_nome);

        input_pesquisar.setPreferredSize(new java.awt.Dimension(400, 20));
        panel_pesquisa.add(input_pesquisar);

        btn_pesquisar.setText("Pesquisar");
        btn_pesquisar.setToolTipText("");
        btn_pesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pesquisarActionPerformed(evt);
            }
        });
        panel_pesquisa.add(btn_pesquisar);

        panel_tabela.setBorder(javax.swing.BorderFactory.createTitledBorder("Livros encontrados"));

        table_livros.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        table_livros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Título", "Classificação", "Autor", "Subárea", "Objeto"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_livros.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table_livros);
        if (table_livros.getColumnModel().getColumnCount() > 0) {
            table_livros.getColumnModel().getColumn(0).setMinWidth(70);
            table_livros.getColumnModel().getColumn(0).setPreferredWidth(70);
            table_livros.getColumnModel().getColumn(0).setMaxWidth(150);
            table_livros.getColumnModel().getColumn(5).setMinWidth(0);
            table_livros.getColumnModel().getColumn(5).setPreferredWidth(0);
            table_livros.getColumnModel().getColumn(5).setMaxWidth(0);
        }

        javax.swing.GroupLayout panel_tabelaLayout = new javax.swing.GroupLayout(panel_tabela);
        panel_tabela.setLayout(panel_tabelaLayout);
        panel_tabelaLayout.setHorizontalGroup(
            panel_tabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
        );
        panel_tabelaLayout.setVerticalGroup(
            panel_tabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
        );

        panel_paginacao.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panel_paginacao.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 5));

        label_voltarPagina.setForeground(new java.awt.Color(0, 0, 204));
        label_voltarPagina.setText("<< Voltar");
        label_voltarPagina.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                label_voltarPaginaMouseClicked(evt);
            }
        });
        panel_paginacao.add(label_voltarPagina);

        label_nPagina.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        label_nPagina.setText("1");
        panel_paginacao.add(label_nPagina);

        label_proximaPagina.setForeground(new java.awt.Color(0, 0, 204));
        label_proximaPagina.setText("Próxima>>");
        label_proximaPagina.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                label_proximaPaginaMouseClicked(evt);
            }
        });
        panel_paginacao.add(label_proximaPagina);

        java.awt.GridBagLayout panel_ferramentasLayout = new java.awt.GridBagLayout();
        panel_ferramentasLayout.rowHeights = new int[] {50};
        panel_ferramentas.setLayout(panel_ferramentasLayout);

        btn_editar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/img/edit.png"))); // NOI18N
        btn_editar.setText("Editar");
        btn_editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editarActionPerformed(evt);
            }
        });
        panel_ferramentas.add(btn_editar, new java.awt.GridBagConstraints());

        btn_excluir.setIcon(new javax.swing.ImageIcon("C:\\Users\\Bruno\\Pictures\\delete.png")); // NOI18N
        btn_excluir.setText("Excluir");
        btn_excluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_excluirActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        panel_ferramentas.add(btn_excluir, gridBagConstraints);

        label_total.setText("Total listado:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_pesquisa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panel_paginacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panel_tabela, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panel_selecao_pesquisa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panel_ferramentas, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label_total))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(panel_pesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_selecao_pesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(panel_ferramentas, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label_total)
                        .addGap(0, 176, Short.MAX_VALUE))
                    .addComponent(panel_tabela, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_paginacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_pesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pesquisarActionPerformed
        List<Livro> livrosEncontrados = null;
        try {
            if(radio_titulo.isSelected()){
                this.nPagina = 1;
                livrosEncontrados = this.buscarLivrosTitulo(input_pesquisar.getText(), this.nPagina, this.qtdRegistros);                
            }
            else if (radio_locacao.isSelected()){
                livrosEncontrados = this.buscarLivrosLocacao(input_pesquisar.getText(), this.nPagina, this.qtdRegistros);
            }        
            this.label_nPagina.setText(Integer.toString(this.nPagina));
            if (livrosEncontrados != null)
                this.montarTabela(livrosEncontrados);
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
            JOptionPane.showMessageDialog(null, "Nenhum livro encontrado.", "Livro não encontrado.", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btn_pesquisarActionPerformed

    private void label_proximaPaginaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_label_proximaPaginaMouseClicked
        List<Livro> livrosEncontrados = null;
        try {
            if (radio_titulo.isSelected()){
                livrosEncontrados = this.buscarLivrosTitulo(input_pesquisar.getText(), this.nPagina + 1, this.qtdRegistros);
            }
            else if (radio_locacao.isSelected()){
                livrosEncontrados = this.buscarLivrosLocacao(input_pesquisar.getText(), this.nPagina + 1, this.qtdRegistros);
            }            
            this.nPagina = Integer.parseInt(label_nPagina.getText()) + 1;
            this.label_nPagina.setText(Integer.toString(this.nPagina));
            if (livrosEncontrados != null){
                this.montarTabela(livrosEncontrados);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Nenhum livro encontrado.", "Livro não encontrado.", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_label_proximaPaginaMouseClicked

    private void label_voltarPaginaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_label_voltarPaginaMouseClicked
        List<Livro> livrosEncontrados = null;
        try {
            if (radio_titulo.isSelected()){
                livrosEncontrados = this.buscarLivrosTitulo(input_pesquisar.getText(), this.nPagina - 1, this.qtdRegistros);
            }
            else if (radio_locacao.isSelected()){
                livrosEncontrados = this.buscarLivrosLocacao(input_pesquisar.getText(), this.nPagina - 1, this.qtdRegistros);
            }            
            this.nPagina = Integer.parseInt(label_nPagina.getText()) - 1;
            this.label_nPagina.setText(Integer.toString(this.nPagina));
            if (livrosEncontrados != null){
                this.montarTabela(livrosEncontrados);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Nenhum livro encontrado.", "Livro não encontrado.", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_label_voltarPaginaMouseClicked

    private void btn_excluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_excluirActionPerformed
        List<Livro> livrosDeteletar = this.livrosSelecionadosParaExcluir();
        if (livrosDeteletar != null){
            int opcao = JOptionPane.showConfirmDialog(null, "Realmente deseja exluir " + livrosDeteletar.size() + " livros?");
            if (opcao == JOptionPane.YES_OPTION){            
                if (livrosDeteletar.size() > 0){
                    try {
                        for (int i = 0; i < livrosDeteletar.size(); i++){
                            if(livroController.excluirLivro(livrosDeteletar.get(i))){
                                this.dtm.removeRow(table_livros.getSelectedRow());
                            }
                        }
                        JOptionPane.showMessageDialog(null, "Livros deletados com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);

                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro.", JOptionPane.WARNING_MESSAGE);
                    }
                }
            }
        }
    }//GEN-LAST:event_btn_excluirActionPerformed

    private void btn_editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editarActionPerformed
        Livro livro = this.livroSelecionadoParaEditar();
        if (livro != null){
            livroController.editarLivro(livro);
        }
    }//GEN-LAST:event_btn_editarActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_editar;
    private javax.swing.JButton btn_excluir;
    private javax.swing.JButton btn_pesquisar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField input_pesquisar;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label_nPagina;
    private javax.swing.JLabel label_pesquisar_nome;
    private javax.swing.JLabel label_proximaPagina;
    private javax.swing.JLabel label_total;
    private javax.swing.JLabel label_voltarPagina;
    private javax.swing.JPanel panel_ferramentas;
    private javax.swing.JPanel panel_paginacao;
    private javax.swing.JPanel panel_pesquisa;
    private javax.swing.JPanel panel_selecao_pesquisa;
    private javax.swing.JPanel panel_tabela;
    private javax.swing.JRadioButton radio_locacao;
    private javax.swing.JRadioButton radio_titulo;
    private javax.swing.JTable table_livros;
    // End of variables declaration//GEN-END:variables
    
    private List<Livro> buscarLivrosTitulo(String titulo, int nPagina, int qtdRegistros) throws Exception{     
        this.totalTituloLivro(titulo);
        return livroController.recuperarLivrosTitulo(titulo, nPagina, qtdRegistros);
    }
    
    private List<Livro> buscarLivrosLocacao(String locacao, int nPagina, int qtdRegistros) throws Exception{     
        this.totalLocacaoLivro(locacao);
        return livroController.recuperarLivrosLocacao(locacao, nPagina, qtdRegistros);
    }
    private void montarTabela(List<Livro> livrosEncontrados) {
        this.dtm = (DefaultTableModel) table_livros.getModel();
        this.limparTabela(dtm);
        for (Livro l : livrosEncontrados){
            this.dtm.addRow(new Object[]{l.getId_livro(), l.getTitulo_livro(), l.getLocacao_livro(),
                l.getAutor().getNome_autor(), l.getSubarea().getNome_subarea(), l});
        }
    }

    private void limparTabela(DefaultTableModel dtm) {
        while (dtm.getRowCount() > 0){
            dtm.removeRow(0);
        }
    }
    
    private Livro livroSelecionadoParaEditar(){
        try{
            Livro livroSelecionado = (Livro)table_livros.getValueAt(table_livros.getSelectedRow(), 5);
            if (livroSelecionado == null){
                throw new Exception();
            }
            return livroSelecionado;
        }
        catch (Exception ex){
            JOptionPane.showMessageDialog(null, "Nenhum livro selecionado!", "Erro.", JOptionPane.INFORMATION_MESSAGE);
            return null;
        }
    }
    
    private List<Livro> livrosSelecionadosParaExcluir(){
        try{            
            int qtdLivrosSelecionados[] = table_livros.getSelectedRows();
            if (qtdLivrosSelecionados.length > 0){
                List<Livro> livrosSelecionados = new ArrayList<Livro>();
                for (int i = 0; i < qtdLivrosSelecionados.length; i++){
                    Livro livroSelecionado = (Livro)table_livros.getValueAt(qtdLivrosSelecionados[i], 5);
                    livrosSelecionados.add(livroSelecionado);
                }
                return livrosSelecionados;
            } else{
                throw new Exception();
            }     
        }
        catch (Exception ex){
            JOptionPane.showMessageDialog(null, "Nenhum livro selecionado!", "Erro.", JOptionPane.INFORMATION_MESSAGE);
        }
        return null;
    }
    
    public void totalTituloLivro(String texto){
        this.label_total.setText("Total listado: " + Integer.toString(livroController.totalTitulo(texto)));
    }
    
    public void totalLocacaoLivro(String texto){
        this.label_total.setText("Total listado: " + Integer.toString(livroController.totalLocacao(texto)));
    }
}
