/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.autor;

import controller.AutorController;
import java.awt.Color;
import java.awt.Frame;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import model.Autor;

/**
 *
 * @author Bruno
 */
public class CadastrarAutor extends javax.swing.JInternalFrame {    
   
    
    AutorController autorController = new AutorController();
    /**
     * Creates new form CadastrarAutor
     */
    public CadastrarAutor() {
        initComponents();
        getRootPane().setDefaultButton(btn_confirmar);
        try {
            this.inicializar();
        } catch (Exception ex) {            
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro!", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_principal = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        panel_dados = new javax.swing.JPanel();
        label_nome = new javax.swing.JLabel();
        input_nome = new javax.swing.JTextField();
        label_email = new javax.swing.JLabel();
        input_email = new javax.swing.JTextField();
        label_site = new javax.swing.JLabel();
        input_site = new javax.swing.JTextField();
        panel_botoes = new javax.swing.JPanel();
        btn_confirmar = new javax.swing.JButton();
        btn_voltar = new javax.swing.JButton();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Cadastrar autor");
        setToolTipText("Cadastrar autor");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/img/man.png"))); // NOI18N
        jPanel1.add(jLabel1);

        panel_dados.setBorder(javax.swing.BorderFactory.createTitledBorder("Cadastrar autor"));
        panel_dados.setLayout(new java.awt.GridLayout(3, 2, 0, 10));

        label_nome.setText("Nome do autor:");
        panel_dados.add(label_nome);

        input_nome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input_nomeActionPerformed(evt);
            }
        });
        panel_dados.add(input_nome);

        label_email.setText("E-mail do autor:");
        panel_dados.add(label_email);
        panel_dados.add(input_email);

        label_site.setText("Site do autor:");
        panel_dados.add(label_site);
        panel_dados.add(input_site);

        panel_botoes.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 10, 5);
        flowLayout1.setAlignOnBaseline(true);
        panel_botoes.setLayout(flowLayout1);

        btn_confirmar.setText("Confirmar");
        btn_confirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_confirmarActionPerformed(evt);
            }
        });
        panel_botoes.add(btn_confirmar);

        btn_voltar.setText("Voltar");
        btn_voltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_voltarActionPerformed(evt);
            }
        });
        panel_botoes.add(btn_voltar);

        javax.swing.GroupLayout panel_principalLayout = new javax.swing.GroupLayout(panel_principal);
        panel_principal.setLayout(panel_principalLayout);
        panel_principalLayout.setHorizontalGroup(
            panel_principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_principalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panel_botoes, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE)
                    .addComponent(panel_dados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(16, 16, 16))
        );
        panel_principalLayout.setVerticalGroup(
            panel_principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_principalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_dados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_botoes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_principal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_principal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void input_nomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input_nomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_input_nomeActionPerformed

    private void btn_confirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_confirmarActionPerformed
        // valida campos
        if (this.validarCampos()){
            if (this.procurarAutor()){
               int opcao = JOptionPane.showConfirmDialog(null, "Já existe esse autor na base de dados. Deseja atualizá-lo?");
               if (opcao == JOptionPane.YES_OPTION){
                   if (this.atualizarAutor()){
                       JOptionPane.showMessageDialog(null, "Autor atualizado com sucesso!", "Sucesso", 
                            JOptionPane.INFORMATION_MESSAGE);
                       this.dispose();
                   }
               }
               else if (opcao == JOptionPane.NO_OPTION){
                   int opcao2 = JOptionPane.showConfirmDialog(null, "Essa opção pode causar duplicidade na base de dados. Você tem certeza?", "Autor duplicado", JOptionPane.WARNING_MESSAGE);
                   if (opcao2 == JOptionPane.YES_OPTION){
                       if (this.salvarAutor()){
                            JOptionPane.showMessageDialog(null, "Autor salvo com sucesso!", "Sucesso", 
                                    JOptionPane.INFORMATION_MESSAGE);
                            this.dispose();
                        }
                   }
               }
            }
            else{
                int opcao = JOptionPane.showConfirmDialog(null, "Deseja salvar novo autor?");
                if (opcao == JOptionPane.YES_OPTION){
                    if (this.salvarAutor()){
                        JOptionPane.showMessageDialog(null, "Autor salvo com sucesso!", "Sucesso", 
                                JOptionPane.INFORMATION_MESSAGE);
                        this.dispose();
                    }
                }
            }
        }
    }//GEN-LAST:event_btn_confirmarActionPerformed

    private void btn_voltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_voltarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btn_voltarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_confirmar;
    private javax.swing.JButton btn_voltar;
    private javax.swing.JTextField input_email;
    private javax.swing.JTextField input_nome;
    private javax.swing.JTextField input_site;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel label_email;
    private javax.swing.JLabel label_nome;
    private javax.swing.JLabel label_site;
    private javax.swing.JPanel panel_botoes;
    private javax.swing.JPanel panel_dados;
    private javax.swing.JPanel panel_principal;
    // End of variables declaration//GEN-END:variables

    private boolean validarCampos() {        
        try {
            //this.validarInputCodigo();
            this.validarInputNome();
            this.validarInputEmail();
            this.validarInputSite();
            return true;
        } catch (Exception ex) {
            System.out.println("Erro ao validar campos");
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Alerta de validação", JOptionPane.WARNING_MESSAGE);
            return false;
        }
    }
    
    private boolean validarInputCodigo() throws Exception{
        /*if (this.input_codigo.getText().isEmpty() == true){
            System.out.println("Código está vazio do autor está vazio");
            throw new Exception("Código do autor não pode ser vazio!");
        }*/
        return true;
    }
    
    private boolean validarInputNome() throws Exception{
        JTextField texto = this.input_nome;
        if (texto.getText().isEmpty() == true){
            texto.setBorder(new LineBorder(Color.RED));
            throw new Exception("Nome do autor não pode ser vazio!");
        }
        return true;
    }
    
    private boolean validarInputEmail() throws Exception{
        JTextField texto = this.input_email;
        String regex = "[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@"
                + "(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])";
        if (texto.getText().isEmpty() == false){
            if (texto.getText().matches(regex) == false){
                texto.setBorder(new LineBorder(Color.RED));
                System.out.println("E-mail inválido. Não respeitou ao padrão regex");
                throw new Exception("E-mail inválido. Digite um e-mail válido!");
            }
        }
        return true;
    }

    private void validarInputSite() throws Exception {
        JTextField texto = this.input_site;
        String regex = "([\\w-]+\\.)+[\\w-]+(/[\\w- ./?%&=]*)?";
        if (texto.getText().isEmpty() == false){
            if (texto.getText().matches(regex) == false){
                texto.setBorder(new LineBorder(Color.RED));
                System.out.println("Site. Não respeitou ao padrão regex");
                throw new Exception("Site inválido. Digite um site válido!");
            }
        }
    }

    private void inicializar() throws Exception {
        int codigo_livro =  autorController.recuperarIDAutorValido();
        //this.input_codigo.setText(Integer.toString(codigo_livro));
        if (codigo_livro == -1){
            throw new Exception("Erro ao recuperar um id válido!");
        } 
    }
    
    private boolean salvarAutor(){       
        try {
            Autor a = new Autor(this.input_nome.getText());
            a.setEmail_autor(this.input_email.getText());
            a.setSite_autor(this.input_site.getText());
            autorController.salvarAutor(a);
            return true;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro ao salvar autor.", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    private boolean procurarAutor() {
        String nome_autor = this.input_nome.getText();
        return autorController.possuiAutorNome(nome_autor);
    }

    private boolean atualizarAutor() {
        return true;
    }
}
